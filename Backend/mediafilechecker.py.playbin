#!/usr/bin/python

import os
import gobject, gst
from PySide import QtCore, QtGui


class MediaFileChecker (QtCore.QObject):

	discoveredsignal = QtCore.Signal (int, dict)

	def __init__ (self, mediafile, row, parent = None):
		QtCore.QObject.__init__ (self, parent)
		gobject.threads_init()
		self.mainloop = gobject.MainLoop()
		self.context = self.mainloop.get_context()

		self.mediafile = mediafile
		self.row = row

	@QtCore.Slot()
	def startworker (self):

		if not os.path.isfile (self.mediafile):
			self.discoveredsignal.emit (self.row, {})
			self.finished.emit()
			return

		self.player = gst.element_factory_make ("playbin2")
		self.player.set_property ("uri", "file:///" + self.mediafile)

		self.bus = self.player.get_bus()
		self.bus.enable_sync_message_emission()
		self.bus.add_signal_watch()
		self.bus.connect ("message", self.on_message)
		self.bus.connect ("message::tag", self.on_tag)

		contexttimer = QtCore.QTimer()
		contexttimer.timeout.connect (self.on_timeout)
		contexttimer.start (100)

		self.player.set_state (gst.STATE_PLAYING)

	def on_message (self, bus, message):
		if message.type == gst.MESSAGE_EOS:
			self.player.set_state (gst.STATE_NULL)
		elif message.type == gst.MESSAGE_ERROR:
			self.player.set_state (gst.STATE_NULL)

	def on_tag (self, bus, msg):
		print msg
		print msg.src.get_name()

	def on_timeout (self):
		while self.context.pending():
			self.context.iteration()
